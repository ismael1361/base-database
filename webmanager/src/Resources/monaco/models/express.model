declare namespace RangeParser {
	interface RangeParserRanges extends Array<Range> {
		type: string;
	}
	interface Range {
		start: number;
		end: number;
	}
	interface RangeParserOptions {
		combine?: boolean | undefined;
	}
	type ResultUnsatisfiable = -1;
	type ResultInvalid = -2;
	type RangeParserResult = ResultUnsatisfiable | ResultInvalid;
}

declare module "express" {
	import { EventEmitter } from "events";
	import * as http from "http";

	interface MediaType {
		value: string;
		quality: number;
		type: string;
		subtype: string;
	}

	interface Dictionary<T> {
		[key: string]: T;
	}

	interface ParamsDictionary {
		[key: string]: string;
	}

	interface Query {
		[key: string]: undefined | string | string[] | Query | Query[];
	}

	/**
	 * The next function.
	 */
	interface NextFunction {
		(err?: any): void;
		/**
		 * "Break-out" of a router by calling {next('router')};
		 * @see {https://expressjs.com/en/guide/using-middleware.html#middleware.router}
		 */
		(deferToNext: "router"): void;
		/**
		 * "Break-out" of a route by calling {next('route')};
		 * @see {https://expressjs.com/en/guide/using-middleware.html#middleware.application}
		 */
		(deferToNext: "route"): void;
	}

	interface Locals {}

	interface Handler extends RequestHandler {}

	type RequestParamHandler = (req: Request, res: Response, next: NextFunction, value: any, name: string) => any;

	type ErrorRequestHandler<P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>> = (
		err: any,
		req: Request<P, ResBody, ReqBody, ReqQuery, LocalsObj>,
		res: Response<ResBody, LocalsObj>,
		next: NextFunction,
	) => void | Promise<void>;

	type RequestHandlerParams<P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>> =
		| RequestHandler<P, ResBody, ReqBody, ReqQuery, LocalsObj>
		| ErrorRequestHandler<P, ResBody, ReqBody, ReqQuery, LocalsObj>
		| Array<RequestHandler<P> | ErrorRequestHandler<P>>;

	type RemoveTail<S extends string, Tail extends string> = S extends `${infer P}${Tail}` ? P : S;
	type GetRouteParameter<S extends string> = RemoveTail<RemoveTail<RemoveTail<S, `/${string}`>, `-${string}`>, `.${string}`>;

	type RouteParameters<Route extends string> = string extends Route
		? ParamsDictionary
		: Route extends `${string}(${string}`
		? ParamsDictionary // TODO: handling for regex parameters
		: Route extends `${string}:${infer Rest}`
		? (GetRouteParameter<Rest> extends never
				? ParamsDictionary
				: GetRouteParameter<Rest> extends `${infer ParamName}?`
				? { [P in ParamName]?: string }
				: { [P in GetRouteParameter<Rest>]: string }) &
				(Rest extends `${GetRouteParameter<Rest>}${infer Next}` ? RouteParameters<Next> : unknown)
		: {};

	interface RequestHandler<P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>> {
		// tslint:disable-next-line callable-types (This is extended from and can't extend from a type alias in ts<2.2)
		(req: Request<P, ResBody, ReqBody, ReqQuery, LocalsObj>, res: Response<ResBody, LocalsObj>, next: NextFunction): void | Promise<void>;
	}

	interface IRouterMatcher<T, Method extends "all" | "get" | "post" | "put" | "delete" | "patch" | "options" | "head" = any> {
		<Route extends string, P = RouteParameters<Route>, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>>(
			path: Route,
			...handlers: Array<RequestHandler<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
		): T;
		<Path extends string, P = RouteParameters<Path>, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>>(
			path: Path,
			...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
		): T;
		<P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>>(
			path: PathParams,
			...handlers: Array<RequestHandler<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
		): T;
		<P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>>(
			path: PathParams,
			...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
		): T;
		(path: PathParams, subApplication: Application): T;
	}

	interface IRouterHandler<T, Route extends string = string> {
		(...handlers: Array<RequestHandler<RouteParameters<Route>>>): T;
		(...handlers: Array<RequestHandlerParams<RouteParameters<Route>>>): T;
		<P = RouteParameters<Route>, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>>(
			...handlers: Array<RequestHandler<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
		): T;
		<P = RouteParameters<Route>, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>>(
			...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
		): T;
		<P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>>(
			...handlers: Array<RequestHandler<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
		): T;
		<P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = Query, LocalsObj extends Record<string, any> = Record<string, any>>(
			...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery, LocalsObj>>
		): T;
	}

	type PathParams = string | RegExp | Array<string | RegExp>;

	interface IRouter extends RequestHandler {
		param(name: string, handler: RequestParamHandler): this;

		param(callback: (name: string, matcher: RegExp) => RequestParamHandler): this;

		"all": IRouterMatcher<this, "all">;
		"get": IRouterMatcher<this, "get">;
		"post": IRouterMatcher<this, "post">;
		"put": IRouterMatcher<this, "put">;
		"delete": IRouterMatcher<this, "delete">;
		"patch": IRouterMatcher<this, "patch">;
		"options": IRouterMatcher<this, "options">;
		"head": IRouterMatcher<this, "head">;

		"checkout": IRouterMatcher<this>;
		"connect": IRouterMatcher<this>;
		"copy": IRouterMatcher<this>;
		"lock": IRouterMatcher<this>;
		"merge": IRouterMatcher<this>;
		"mkactivity": IRouterMatcher<this>;
		"mkcol": IRouterMatcher<this>;
		"move": IRouterMatcher<this>;
		"m-search": IRouterMatcher<this>;
		"notify": IRouterMatcher<this>;
		"propfind": IRouterMatcher<this>;
		"proppatch": IRouterMatcher<this>;
		"purge": IRouterMatcher<this>;
		"report": IRouterMatcher<this>;
		"search": IRouterMatcher<this>;
		"subscribe": IRouterMatcher<this>;
		"trace": IRouterMatcher<this>;
		"unlock": IRouterMatcher<this>;
		"unsubscribe": IRouterMatcher<this>;
		"link": IRouterMatcher<this>;
		"unlink": IRouterMatcher<this>;

		"use": IRouterHandler<this> & IRouterMatcher<this>;

		route<T extends string>(prefix: T): IRoute<T>;
		route(prefix: PathParams): IRoute;

		"stack": ILayer[];
	}

	interface ILayer {
		route?: IRoute;
		name: string | "<anonymous>";
		params?: Record<string, any>;
		keys: string[];
		path?: string;
		method: string;
		regexp: RegExp;
		handle: (req: Request, res: Response, next: NextFunction) => any;
	}

	interface IRoute<Route extends string = string> {
		"path": string;
		"stack": ILayer[];
		"all": IRouterHandler<this, Route>;
		"get": IRouterHandler<this, Route>;
		"post": IRouterHandler<this, Route>;
		"put": IRouterHandler<this, Route>;
		"delete": IRouterHandler<this, Route>;
		"patch": IRouterHandler<this, Route>;
		"options": IRouterHandler<this, Route>;
		"head": IRouterHandler<this, Route>;

		"checkout": IRouterHandler<this, Route>;
		"copy": IRouterHandler<this, Route>;
		"lock": IRouterHandler<this, Route>;
		"merge": IRouterHandler<this, Route>;
		"mkactivity": IRouterHandler<this, Route>;
		"mkcol": IRouterHandler<this, Route>;
		"move": IRouterHandler<this, Route>;
		"m-search": IRouterHandler<this, Route>;
		"notify": IRouterHandler<this, Route>;
		"purge": IRouterHandler<this, Route>;
		"report": IRouterHandler<this, Route>;
		"search": IRouterHandler<this, Route>;
		"subscribe": IRouterHandler<this, Route>;
		"trace": IRouterHandler<this, Route>;
		"unlock": IRouterHandler<this, Route>;
		"unsubscribe": IRouterHandler<this, Route>;
	}

	interface Router extends IRouter {}

	type ApplicationRequestHandler<T> = IRouterHandler<T> & IRouterMatcher<T> & ((...handlers: RequestHandlerParams[]) => T);

	interface Application<LocalsObj extends Record<string, any> = Record<string, any>> extends EventEmitter {
		(req: Request | http.IncomingMessage, res: Response | http.ServerResponse): any;

		init(): void;

		defaultConfiguration(): void;

		engine(ext: string, fn: (path: string, options: object, callback: (e: any, rendered?: string) => void) => void): this;

		set(setting: string, val: any): this;
		get: ((name: string) => any) & IRouterMatcher<this>;

		param(name: string | string[], handler: RequestParamHandler): this;

		param(callback: (name: string, matcher: RegExp) => RequestParamHandler): this;

		path(): string;

		enabled(setting: string): boolean;

		disabled(setting: string): boolean;

		enable(setting: string): this;

		disable(setting: string): this;

		render(name: string, options?: object, callback?: (err: Error, html: string) => void): void;
		render(name: string, callback: (err: Error, html: string) => void): void;

		listen(port: number, hostname: string, backlog: number, callback?: () => void): http.Server;
		listen(port: number, hostname: string, callback?: () => void): http.Server;
		listen(port: number, callback?: () => void): http.Server;
		listen(callback?: () => void): http.Server;
		listen(path: string, callback?: () => void): http.Server;
		listen(handle: any, listeningListener?: () => void): http.Server;

		router: string;

		settings: any;

		resource: any;

		map: any;

		locals: LocalsObj & Locals;

		routes: any;

		_router: any;

		use: ApplicationRequestHandler<this>;

		on: (event: string, callback: (parent: Application) => void) => this;

		mountpath: string | string[];
	}

	/**
	 * The request object.
	 */
	interface Request<P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = Query, Locals extends Record<string, any> = Record<string, any>> extends http.IncomingMessage {
		get(name: "set-cookie"): string[] | undefined;
		get(name: string): string | undefined;

		header(name: "set-cookie"): string[] | undefined;
		header(name: string): string | undefined;

		accepts(): string[];
		accepts(type: string): string | false;
		accepts(type: string[]): string | false;
		accepts(...type: string[]): string | false;

		acceptsCharsets(): string[];
		acceptsCharsets(charset: string): string | false;
		acceptsCharsets(charset: string[]): string | false;
		acceptsCharsets(...charset: string[]): string | false;

		acceptsEncodings(): string[];
		acceptsEncodings(encoding: string): string | false;
		acceptsEncodings(encoding: string[]): string | false;
		acceptsEncodings(...encoding: string[]): string | false;

		acceptsLanguages(): string[];
		acceptsLanguages(lang: string): string | false;
		acceptsLanguages(lang: string[]): string | false;
		acceptsLanguages(...lang: string[]): string | false;

		range(size: number, options?: RangeParser.RangeParserOptions): RangeParser.RangeParserRanges | RangeParser.RangeParserResult | undefined;

		accepted: MediaType[];

		param(name: string, defaultValue?: any): string;

		is(type: string | string[]): string | false | null;

		readonly protocol: string;

		readonly secure: boolean;

		readonly ip: string | undefined;

		readonly ips: string[];

		readonly subdomains: string[];

		readonly path: string;

		readonly hostname: string;

		readonly host: string;

		readonly fresh: boolean;

		readonly stale: boolean;

		readonly xhr: boolean;

		body: ReqBody;

		cookies: any;

		method: string;

		params: P;

		query: ReqQuery;

		route: any;

		signedCookies: any;

		originalUrl: string;

		url: string;

		baseUrl: string;

		app: Application;

		res?: Response<ResBody, Locals> | undefined;
		next?: NextFunction | undefined;
	}

	type Send<ResBody = any, T = Response<ResBody>> = (body?: ResBody) => T;

	interface SendOptions {
		acceptRanges?: boolean | undefined;
		cacheControl?: boolean | undefined;
		dotfiles?: "allow" | "deny" | "ignore" | undefined;
		end?: number | undefined;
		etag?: boolean | undefined;
		extensions?: string[] | string | boolean | undefined;
		immutable?: boolean | undefined;
		index?: string[] | string | boolean | undefined;
		lastModified?: boolean | undefined;
		maxAge?: string | number | undefined;
		root?: string | undefined;
		start?: number | undefined;
	}

	interface SendFileOptions extends SendOptions {
		headers?: Record<string, unknown>;
	}

	interface DownloadOptions extends SendOptions {
		headers?: Record<string, unknown>;
	}

	type Errback = (err: Error) => void;

	interface CookieOptions {
		maxAge?: number | undefined;
		signed?: boolean | undefined;
		expires?: Date | undefined;
		httpOnly?: boolean | undefined;
		path?: string | undefined;
		domain?: string | undefined;
		secure?: boolean | undefined;
		encode?: ((val: string) => string) | undefined;
		sameSite?: boolean | "lax" | "strict" | "none" | undefined;
		priority?: "low" | "medium" | "high";
		partitioned?: boolean | undefined;
	}

	/**
	 * The response object.
	 */
	interface Response<ResBody = any, LocalsObj extends Record<string, any> = Record<string, any>, StatusCode extends number = number> extends http.ServerResponse {
		status(code: StatusCode): this;

		sendStatus(code: StatusCode): this;

		links(links: any): this;

		send: Send<ResBody, this>;

		json: Send<ResBody, this>;

		jsonp: Send<ResBody, this>;

		sendFile(path: string, fn?: Errback): void;
		sendFile(path: string, options: SendFileOptions, fn?: Errback): void;

		sendfile(path: string): void;

		sendfile(path: string, options: SendFileOptions): void;

		sendfile(path: string, fn: Errback): void;

		sendfile(path: string, options: SendFileOptions, fn: Errback): void;

		download(path: string, fn?: Errback): void;
		download(path: string, filename: string, fn?: Errback): void;
		download(path: string, filename: string, options: DownloadOptions, fn?: Errback): void;

		contentType(type: string): this;

		type(type: string): this;

		format(obj: any): this;

		attachment(filename?: string): this;

		set(field: any): this;
		set(field: string, value?: string | string[]): this;

		header(field: any): this;
		header(field: string, value?: string | string[]): this;

		headersSent: boolean;

		get(field: string): string | undefined;

		clearCookie(name: string, options?: CookieOptions): this;

		cookie(name: string, val: string, options: CookieOptions): this;
		cookie(name: string, val: any, options: CookieOptions): this;
		cookie(name: string, val: any): this;

		location(url: string): this;

		redirect(url: string): void;
		redirect(status: number, url: string): void;

		redirect(url: string, status: number): void;

		render(view: string, options?: object, callback?: (err: Error, html: string) => void): void;
		render(view: string, callback?: (err: Error, html: string) => void): void;

		locals: LocalsObj & Locals;

		charset: string;

		vary(field: string): this;

		app: Application;

		append(field: string, value?: string[] | string): this;

		req: Request;
	}
}
